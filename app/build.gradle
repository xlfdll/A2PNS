apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

kapt {
    correctErrorTypes = true
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "org.xlfdll.a2pns"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 8
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.preference:preference:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // Kotlinx.coroutines
    def ktx_coroutines_version = '1.3.3'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$ktx_coroutines_version"

    // Android Jetpack - ViewModel and LiveData
    def lifecycle_version = '2.1.0'
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    testImplementation "androidx.arch.core:core-testing:$lifecycle_version"

    // Android Jetpack - Room
    def room_version = "2.2.3"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"

    // Gson
    def gson_version = '2.8.6'
    implementation "com.google.code.gson:gson:$gson_version"

    // OkHttp
    def okhttp_version = '4.3.1'
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    // Retrofit
    def retrofit_version = '2.7.1'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    // Dagger
    def dagger_version = '2.25.4'
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // Epoxy
    def epoxy_version = '3.9.0'
    implementation "com.airbnb.android:epoxy:$epoxy_version"
    implementation "com.airbnb.android:epoxy-databinding:$epoxy_version"
    kapt "com.airbnb.android:epoxy-processor:$epoxy_version"

    // ThreeTenABP (LocalDateTime)
    def threetenabp_version = "1.2.1"
    implementation "com.jakewharton.threetenabp:threetenabp:$threetenabp_version"

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "300" // or whatever number you want
        }
    }

    def budiyev_code_scanner_version = '2.1.0'
    implementation "com.budiyev.android:code-scanner:$budiyev_code_scanner_version"
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':app:assembleRelease')) {
        String externalData = new File('app/src/main/java/org/xlfdll/a2pns/ExternalData.kt').text

        if (externalData.contains('MockMode = true') || externalData.contains('DebugMode = true')) {
            logger.error('Debug switches must be turned off to build release version.')
            throw new GradleException('Debug switches must be turned off to build release version.')
        }
    }
}
